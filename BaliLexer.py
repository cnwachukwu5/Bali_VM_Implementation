# Generated from Bali.g4 by ANTLR 4.7.1
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2\60")
        buf.write("\u0145\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.")
        buf.write("\t.\4/\t/\4\60\t\60\4\61\t\61\3\2\3\2\3\2\3\2\3\3\3\3")
        buf.write("\3\4\3\4\3\5\3\5\3\6\3\6\3\7\3\7\3\b\3\b\3\t\3\t\3\n\3")
        buf.write("\n\3\n\3\n\3\n\3\n\3\13\3\13\3\13\3\f\3\f\3\f\3\f\3\f")
        buf.write("\3\r\3\r\3\r\3\r\3\r\3\r\3\16\3\16\3\16\3\16\3\16\3\16")
        buf.write("\3\16\3\17\3\17\3\17\3\20\3\20\3\20\3\20\3\20\3\20\3\20")
        buf.write("\3\20\3\21\3\21\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\23")
        buf.write("\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\24\3\24\3\24\3\24")
        buf.write("\3\24\3\25\3\25\3\25\3\25\3\25\3\25\3\26\3\26\3\27\3\27")
        buf.write("\3\30\3\30\3\31\3\31\3\32\3\32\3\33\3\33\3\34\3\34\3\35")
        buf.write("\3\35\3\36\3\36\3\37\3\37\3\37\3 \3 \3 \3!\3!\3!\3!\3")
        buf.write("\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3#\3#\3#\3#\3$\3$\3$\3")
        buf.write("$\3$\3%\3%\3%\3%\3%\3%\3&\3&\3&\3&\3&\3&\3&\3\'\3\'\3")
        buf.write("\'\3\'\3\'\3(\3(\3(\3(\3(\3(\3)\3)\3)\3)\3*\5*\u0102\n")
        buf.write("*\3*\6*\u0105\n*\r*\16*\u0106\3+\3+\7+\u010b\n+\f+\16")
        buf.write("+\u010e\13+\3+\3+\3+\7+\u0113\n+\f+\16+\u0116\13+\3+\5")
        buf.write("+\u0119\n+\3,\3,\3,\3,\7,\u011f\n,\f,\16,\u0122\13,\3")
        buf.write("-\6-\u0125\n-\r-\16-\u0126\3-\3-\3.\3.\7.\u012d\n.\f.")
        buf.write("\16.\u0130\13.\3.\3.\3/\3/\3/\3/\7/\u0138\n/\f/\16/\u013b")
        buf.write("\13/\3/\3/\3/\3/\3/\3\60\3\60\3\61\3\61\5\u010c\u0114")
        buf.write("\u0139\2\62\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25")
        buf.write("\f\27\r\31\16\33\17\35\20\37\21!\22#\23%\24\'\25)\26+")
        buf.write("\27-\30/\31\61\32\63\33\65\34\67\359\36;\37= ?!A\"C#E")
        buf.write("$G%I&K\'M(O)Q*S+U,W-Y.[/]\60_\2a\2\3\2\6\4\2C\\c|\5\2")
        buf.write("\13\f\17\17\"\"\4\2\f\f\17\17\3\2\62;\2\u014d\2\3\3\2")
        buf.write("\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2")
        buf.write("\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2")
        buf.write("\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35")
        buf.write("\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2")
        buf.write("\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2")
        buf.write("\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2")
        buf.write("\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2")
        buf.write("\2\2C\3\2\2\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2")
        buf.write("\2\2\2M\3\2\2\2\2O\3\2\2\2\2Q\3\2\2\2\2S\3\2\2\2\2U\3")
        buf.write("\2\2\2\2W\3\2\2\2\2Y\3\2\2\2\2[\3\2\2\2\2]\3\2\2\2\3c")
        buf.write("\3\2\2\2\5g\3\2\2\2\7i\3\2\2\2\tk\3\2\2\2\13m\3\2\2\2")
        buf.write("\ro\3\2\2\2\17q\3\2\2\2\21s\3\2\2\2\23u\3\2\2\2\25{\3")
        buf.write("\2\2\2\27~\3\2\2\2\31\u0083\3\2\2\2\33\u0089\3\2\2\2\35")
        buf.write("\u0090\3\2\2\2\37\u0093\3\2\2\2!\u009b\3\2\2\2#\u009d")
        buf.write("\3\2\2\2%\u00a4\3\2\2\2\'\u00ac\3\2\2\2)\u00b1\3\2\2\2")
        buf.write("+\u00b7\3\2\2\2-\u00b9\3\2\2\2/\u00bb\3\2\2\2\61\u00bd")
        buf.write("\3\2\2\2\63\u00bf\3\2\2\2\65\u00c1\3\2\2\2\67\u00c3\3")
        buf.write("\2\2\29\u00c5\3\2\2\2;\u00c7\3\2\2\2=\u00c9\3\2\2\2?\u00cc")
        buf.write("\3\2\2\2A\u00cf\3\2\2\2C\u00d3\3\2\2\2E\u00db\3\2\2\2")
        buf.write("G\u00df\3\2\2\2I\u00e4\3\2\2\2K\u00ea\3\2\2\2M\u00f1\3")
        buf.write("\2\2\2O\u00f6\3\2\2\2Q\u00fc\3\2\2\2S\u0101\3\2\2\2U\u0118")
        buf.write("\3\2\2\2W\u011a\3\2\2\2Y\u0124\3\2\2\2[\u012a\3\2\2\2")
        buf.write("]\u0133\3\2\2\2_\u0141\3\2\2\2a\u0143\3\2\2\2cd\7f\2\2")
        buf.write("de\7g\2\2ef\7h\2\2f\4\3\2\2\2gh\7*\2\2h\6\3\2\2\2ij\7")
        buf.write("+\2\2j\b\3\2\2\2kl\7.\2\2l\n\3\2\2\2mn\7}\2\2n\f\3\2\2")
        buf.write("\2op\7\177\2\2p\16\3\2\2\2qr\7?\2\2r\20\3\2\2\2st\7=\2")
        buf.write("\2t\22\3\2\2\2uv\7r\2\2vw\7t\2\2wx\7k\2\2xy\7p\2\2yz\7")
        buf.write("v\2\2z\24\3\2\2\2{|\7k\2\2|}\7h\2\2}\26\3\2\2\2~\177\7")
        buf.write("g\2\2\177\u0080\7n\2\2\u0080\u0081\7u\2\2\u0081\u0082")
        buf.write("\7g\2\2\u0082\30\3\2\2\2\u0083\u0084\7y\2\2\u0084\u0085")
        buf.write("\7j\2\2\u0085\u0086\7k\2\2\u0086\u0087\7n\2\2\u0087\u0088")
        buf.write("\7g\2\2\u0088\32\3\2\2\2\u0089\u008a\7t\2\2\u008a\u008b")
        buf.write("\7g\2\2\u008b\u008c\7v\2\2\u008c\u008d\7w\2\2\u008d\u008e")
        buf.write("\7t\2\2\u008e\u008f\7p\2\2\u008f\34\3\2\2\2\u0090\u0091")
        buf.write("\7f\2\2\u0091\u0092\7q\2\2\u0092\36\3\2\2\2\u0093\u0094")
        buf.write("\7h\2\2\u0094\u0095\7q\2\2\u0095\u0096\7t\2\2\u0096\u0097")
        buf.write("\7g\2\2\u0097\u0098\7c\2\2\u0098\u0099\7e\2\2\u0099\u009a")
        buf.write("\7j\2\2\u009a \3\2\2\2\u009b\u009c\7<\2\2\u009c\"\3\2")
        buf.write("\2\2\u009d\u009e\7u\2\2\u009e\u009f\7y\2\2\u009f\u00a0")
        buf.write("\7k\2\2\u00a0\u00a1\7v\2\2\u00a1\u00a2\7e\2\2\u00a2\u00a3")
        buf.write("\7j\2\2\u00a3$\3\2\2\2\u00a4\u00a5\7f\2\2\u00a5\u00a6")
        buf.write("\7g\2\2\u00a6\u00a7\7h\2\2\u00a7\u00a8\7c\2\2\u00a8\u00a9")
        buf.write("\7w\2\2\u00a9\u00aa\7n\2\2\u00aa\u00ab\7v\2\2\u00ab&\3")
        buf.write("\2\2\2\u00ac\u00ad\7e\2\2\u00ad\u00ae\7c\2\2\u00ae\u00af")
        buf.write("\7u\2\2\u00af\u00b0\7g\2\2\u00b0(\3\2\2\2\u00b1\u00b2")
        buf.write("\7d\2\2\u00b2\u00b3\7t\2\2\u00b3\u00b4\7g\2\2\u00b4\u00b5")
        buf.write("\7c\2\2\u00b5\u00b6\7m\2\2\u00b6*\3\2\2\2\u00b7\u00b8")
        buf.write("\7/\2\2\u00b8,\3\2\2\2\u00b9\u00ba\7#\2\2\u00ba.\3\2\2")
        buf.write("\2\u00bb\u00bc\7-\2\2\u00bc\60\3\2\2\2\u00bd\u00be\7,")
        buf.write("\2\2\u00be\62\3\2\2\2\u00bf\u00c0\7\61\2\2\u00c0\64\3")
        buf.write("\2\2\2\u00c1\u00c2\7(\2\2\u00c2\66\3\2\2\2\u00c3\u00c4")
        buf.write("\7~\2\2\u00c48\3\2\2\2\u00c5\u00c6\7>\2\2\u00c6:\3\2\2")
        buf.write("\2\u00c7\u00c8\7@\2\2\u00c8<\3\2\2\2\u00c9\u00ca\7?\2")
        buf.write("\2\u00ca\u00cb\7?\2\2\u00cb>\3\2\2\2\u00cc\u00cd\7#\2")
        buf.write("\2\u00cd\u00ce\7?\2\2\u00ce@\3\2\2\2\u00cf\u00d0\7k\2")
        buf.write("\2\u00d0\u00d1\7p\2\2\u00d1\u00d2\7v\2\2\u00d2B\3\2\2")
        buf.write("\2\u00d3\u00d4\7d\2\2\u00d4\u00d5\7q\2\2\u00d5\u00d6\7")
        buf.write("q\2\2\u00d6\u00d7\7n\2\2\u00d7\u00d8\7g\2\2\u00d8\u00d9")
        buf.write("\7c\2\2\u00d9\u00da\7p\2\2\u00daD\3\2\2\2\u00db\u00dc")
        buf.write("\7u\2\2\u00dc\u00dd\7v\2\2\u00dd\u00de\7t\2\2\u00deF\3")
        buf.write("\2\2\2\u00df\u00e0\7e\2\2\u00e0\u00e1\7j\2\2\u00e1\u00e2")
        buf.write("\7c\2\2\u00e2\u00e3\7t\2\2\u00e3H\3\2\2\2\u00e4\u00e5")
        buf.write("\7k\2\2\u00e5\u00e6\7p\2\2\u00e6\u00e7\7v\2\2\u00e7\u00e8")
        buf.write("\7]\2\2\u00e8\u00e9\7_\2\2\u00e9J\3\2\2\2\u00ea\u00eb")
        buf.write("\7e\2\2\u00eb\u00ec\7j\2\2\u00ec\u00ed\7c\2\2\u00ed\u00ee")
        buf.write("\7t\2\2\u00ee\u00ef\7]\2\2\u00ef\u00f0\7_\2\2\u00f0L\3")
        buf.write("\2\2\2\u00f1\u00f2\7V\2\2\u00f2\u00f3\7t\2\2\u00f3\u00f4")
        buf.write("\7w\2\2\u00f4\u00f5\7g\2\2\u00f5N\3\2\2\2\u00f6\u00f7")
        buf.write("\7H\2\2\u00f7\u00f8\7c\2\2\u00f8\u00f9\7n\2\2\u00f9\u00fa")
        buf.write("\7u\2\2\u00fa\u00fb\7g\2\2\u00fbP\3\2\2\2\u00fc\u00fd")
        buf.write("\7)\2\2\u00fd\u00fe\t\2\2\2\u00fe\u00ff\7)\2\2\u00ffR")
        buf.write("\3\2\2\2\u0100\u0102\7/\2\2\u0101\u0100\3\2\2\2\u0101")
        buf.write("\u0102\3\2\2\2\u0102\u0104\3\2\2\2\u0103\u0105\5_\60\2")
        buf.write("\u0104\u0103\3\2\2\2\u0105\u0106\3\2\2\2\u0106\u0104\3")
        buf.write("\2\2\2\u0106\u0107\3\2\2\2\u0107T\3\2\2\2\u0108\u010c")
        buf.write("\7$\2\2\u0109\u010b\13\2\2\2\u010a\u0109\3\2\2\2\u010b")
        buf.write("\u010e\3\2\2\2\u010c\u010d\3\2\2\2\u010c\u010a\3\2\2\2")
        buf.write("\u010d\u010f\3\2\2\2\u010e\u010c\3\2\2\2\u010f\u0119\7")
        buf.write("$\2\2\u0110\u0114\7)\2\2\u0111\u0113\13\2\2\2\u0112\u0111")
        buf.write("\3\2\2\2\u0113\u0116\3\2\2\2\u0114\u0115\3\2\2\2\u0114")
        buf.write("\u0112\3\2\2\2\u0115\u0117\3\2\2\2\u0116\u0114\3\2\2\2")
        buf.write("\u0117\u0119\7)\2\2\u0118\u0108\3\2\2\2\u0118\u0110\3")
        buf.write("\2\2\2\u0119V\3\2\2\2\u011a\u0120\5a\61\2\u011b\u011f")
        buf.write("\5a\61\2\u011c\u011f\5_\60\2\u011d\u011f\7a\2\2\u011e")
        buf.write("\u011b\3\2\2\2\u011e\u011c\3\2\2\2\u011e\u011d\3\2\2\2")
        buf.write("\u011f\u0122\3\2\2\2\u0120\u011e\3\2\2\2\u0120\u0121\3")
        buf.write("\2\2\2\u0121X\3\2\2\2\u0122\u0120\3\2\2\2\u0123\u0125")
        buf.write("\t\3\2\2\u0124\u0123\3\2\2\2\u0125\u0126\3\2\2\2\u0126")
        buf.write("\u0124\3\2\2\2\u0126\u0127\3\2\2\2\u0127\u0128\3\2\2\2")
        buf.write("\u0128\u0129\b-\2\2\u0129Z\3\2\2\2\u012a\u012e\7%\2\2")
        buf.write("\u012b\u012d\n\4\2\2\u012c\u012b\3\2\2\2\u012d\u0130\3")
        buf.write("\2\2\2\u012e\u012c\3\2\2\2\u012e\u012f\3\2\2\2\u012f\u0131")
        buf.write("\3\2\2\2\u0130\u012e\3\2\2\2\u0131\u0132\b.\2\2\u0132")
        buf.write("\\\3\2\2\2\u0133\u0134\7\61\2\2\u0134\u0135\7,\2\2\u0135")
        buf.write("\u0139\3\2\2\2\u0136\u0138\13\2\2\2\u0137\u0136\3\2\2")
        buf.write("\2\u0138\u013b\3\2\2\2\u0139\u013a\3\2\2\2\u0139\u0137")
        buf.write("\3\2\2\2\u013a\u013c\3\2\2\2\u013b\u0139\3\2\2\2\u013c")
        buf.write("\u013d\7,\2\2\u013d\u013e\7\61\2\2\u013e\u013f\3\2\2\2")
        buf.write("\u013f\u0140\b/\2\2\u0140^\3\2\2\2\u0141\u0142\t\5\2\2")
        buf.write("\u0142`\3\2\2\2\u0143\u0144\t\2\2\2\u0144b\3\2\2\2\r\2")
        buf.write("\u0101\u0106\u010c\u0114\u0118\u011e\u0120\u0126\u012e")
        buf.write("\u0139\3\b\2\2")
        return buf.getvalue()


class BaliLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    T__35 = 36
    T__36 = 37
    T__37 = 38
    T__38 = 39
    CHAR = 40
    INTEGER = 41
    STRING = 42
    ID = 43
    WS = 44
    COMMENT = 45
    MULTILINE_COMMENT = 46

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'def'", "'('", "')'", "','", "'{'", "'}'", "'='", "';'", "'print'", 
            "'if'", "'else'", "'while'", "'return'", "'do'", "'foreach'", 
            "':'", "'switch'", "'default'", "'case'", "'break'", "'-'", 
            "'!'", "'+'", "'*'", "'/'", "'&'", "'|'", "'<'", "'>'", "'=='", 
            "'!='", "'int'", "'boolean'", "'str'", "'char'", "'int[]'", 
            "'char[]'", "'True'", "'False'" ]

    symbolicNames = [ "<INVALID>",
            "CHAR", "INTEGER", "STRING", "ID", "WS", "COMMENT", "MULTILINE_COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "T__34", "T__35", "T__36", "T__37", 
                  "T__38", "CHAR", "INTEGER", "STRING", "ID", "WS", "COMMENT", 
                  "MULTILINE_COMMENT", "DIGIT", "LETTER" ]

    grammarFileName = "Bali.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


