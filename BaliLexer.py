# Generated from Bali.g4 by ANTLR 4.7.1
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2/")
        buf.write("\u013b\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.")
        buf.write("\t.\4/\t/\4\60\t\60\3\2\3\2\3\2\3\2\3\3\3\3\3\4\3\4\3")
        buf.write("\5\3\5\3\6\3\6\3\7\3\7\3\b\3\b\3\t\3\t\3\n\3\n\3\n\3\n")
        buf.write("\3\n\3\n\3\13\3\13\3\13\3\f\3\f\3\f\3\f\3\f\3\r\3\r\3")
        buf.write("\r\3\r\3\r\3\r\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\17")
        buf.write("\3\17\3\17\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\21")
        buf.write("\3\21\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\23\3\23\3\23")
        buf.write("\3\23\3\23\3\24\3\24\3\24\3\24\3\24\3\24\3\25\3\25\3\26")
        buf.write("\3\26\3\27\3\27\3\30\3\30\3\31\3\31\3\32\3\32\3\33\3\33")
        buf.write("\3\34\3\34\3\35\3\35\3\36\3\36\3\36\3\37\3\37\3\37\3 ")
        buf.write("\3 \3 \3 \3!\3!\3!\3!\3!\3!\3!\3!\3\"\3\"\3\"\3\"\3#\3")
        buf.write("#\3#\3#\3#\3$\3$\3$\3$\3$\3$\3%\3%\3%\3%\3%\3%\3%\3&\3")
        buf.write("&\3&\3&\3&\3\'\3\'\3\'\3\'\3\'\3\'\3(\3(\3(\3(\3)\5)\u00f8")
        buf.write("\n)\3)\6)\u00fb\n)\r)\16)\u00fc\3*\3*\7*\u0101\n*\f*\16")
        buf.write("*\u0104\13*\3*\3*\3*\7*\u0109\n*\f*\16*\u010c\13*\3*\5")
        buf.write("*\u010f\n*\3+\3+\3+\3+\7+\u0115\n+\f+\16+\u0118\13+\3")
        buf.write(",\6,\u011b\n,\r,\16,\u011c\3,\3,\3-\3-\7-\u0123\n-\f-")
        buf.write("\16-\u0126\13-\3-\3-\3.\3.\3.\3.\7.\u012e\n.\f.\16.\u0131")
        buf.write("\13.\3.\3.\3.\3.\3.\3/\3/\3\60\3\60\5\u0102\u010a\u012f")
        buf.write("\2\61\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f\27")
        buf.write("\r\31\16\33\17\35\20\37\21!\22#\23%\24\'\25)\26+\27-\30")
        buf.write("/\31\61\32\63\33\65\34\67\359\36;\37= ?!A\"C#E$G%I&K\'")
        buf.write("M(O)Q*S+U,W-Y.[/]\2_\2\3\2\6\4\2C\\c|\5\2\13\f\17\17\"")
        buf.write("\"\4\2\f\f\17\17\3\2\62;\2\u0143\2\3\3\2\2\2\2\5\3\2\2")
        buf.write("\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2")
        buf.write("\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27")
        buf.write("\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3")
        buf.write("\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2")
        buf.write(")\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2")
        buf.write("\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2")
        buf.write(";\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2")
        buf.write("\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2M\3\2\2")
        buf.write("\2\2O\3\2\2\2\2Q\3\2\2\2\2S\3\2\2\2\2U\3\2\2\2\2W\3\2")
        buf.write("\2\2\2Y\3\2\2\2\2[\3\2\2\2\3a\3\2\2\2\5e\3\2\2\2\7g\3")
        buf.write("\2\2\2\ti\3\2\2\2\13k\3\2\2\2\rm\3\2\2\2\17o\3\2\2\2\21")
        buf.write("q\3\2\2\2\23s\3\2\2\2\25y\3\2\2\2\27|\3\2\2\2\31\u0081")
        buf.write("\3\2\2\2\33\u0087\3\2\2\2\35\u008e\3\2\2\2\37\u0091\3")
        buf.write("\2\2\2!\u0099\3\2\2\2#\u009b\3\2\2\2%\u00a2\3\2\2\2\'")
        buf.write("\u00a7\3\2\2\2)\u00ad\3\2\2\2+\u00af\3\2\2\2-\u00b1\3")
        buf.write("\2\2\2/\u00b3\3\2\2\2\61\u00b5\3\2\2\2\63\u00b7\3\2\2")
        buf.write("\2\65\u00b9\3\2\2\2\67\u00bb\3\2\2\29\u00bd\3\2\2\2;\u00bf")
        buf.write("\3\2\2\2=\u00c2\3\2\2\2?\u00c5\3\2\2\2A\u00c9\3\2\2\2")
        buf.write("C\u00d1\3\2\2\2E\u00d5\3\2\2\2G\u00da\3\2\2\2I\u00e0\3")
        buf.write("\2\2\2K\u00e7\3\2\2\2M\u00ec\3\2\2\2O\u00f2\3\2\2\2Q\u00f7")
        buf.write("\3\2\2\2S\u010e\3\2\2\2U\u0110\3\2\2\2W\u011a\3\2\2\2")
        buf.write("Y\u0120\3\2\2\2[\u0129\3\2\2\2]\u0137\3\2\2\2_\u0139\3")
        buf.write("\2\2\2ab\7f\2\2bc\7g\2\2cd\7h\2\2d\4\3\2\2\2ef\7*\2\2")
        buf.write("f\6\3\2\2\2gh\7+\2\2h\b\3\2\2\2ij\7.\2\2j\n\3\2\2\2kl")
        buf.write("\7}\2\2l\f\3\2\2\2mn\7\177\2\2n\16\3\2\2\2op\7?\2\2p\20")
        buf.write("\3\2\2\2qr\7=\2\2r\22\3\2\2\2st\7r\2\2tu\7t\2\2uv\7k\2")
        buf.write("\2vw\7p\2\2wx\7v\2\2x\24\3\2\2\2yz\7k\2\2z{\7h\2\2{\26")
        buf.write("\3\2\2\2|}\7g\2\2}~\7n\2\2~\177\7u\2\2\177\u0080\7g\2")
        buf.write("\2\u0080\30\3\2\2\2\u0081\u0082\7y\2\2\u0082\u0083\7j")
        buf.write("\2\2\u0083\u0084\7k\2\2\u0084\u0085\7n\2\2\u0085\u0086")
        buf.write("\7g\2\2\u0086\32\3\2\2\2\u0087\u0088\7t\2\2\u0088\u0089")
        buf.write("\7g\2\2\u0089\u008a\7v\2\2\u008a\u008b\7w\2\2\u008b\u008c")
        buf.write("\7t\2\2\u008c\u008d\7p\2\2\u008d\34\3\2\2\2\u008e\u008f")
        buf.write("\7f\2\2\u008f\u0090\7q\2\2\u0090\36\3\2\2\2\u0091\u0092")
        buf.write("\7h\2\2\u0092\u0093\7q\2\2\u0093\u0094\7t\2\2\u0094\u0095")
        buf.write("\7g\2\2\u0095\u0096\7c\2\2\u0096\u0097\7e\2\2\u0097\u0098")
        buf.write("\7j\2\2\u0098 \3\2\2\2\u0099\u009a\7<\2\2\u009a\"\3\2")
        buf.write("\2\2\u009b\u009c\7u\2\2\u009c\u009d\7y\2\2\u009d\u009e")
        buf.write("\7k\2\2\u009e\u009f\7v\2\2\u009f\u00a0\7e\2\2\u00a0\u00a1")
        buf.write("\7j\2\2\u00a1$\3\2\2\2\u00a2\u00a3\7e\2\2\u00a3\u00a4")
        buf.write("\7c\2\2\u00a4\u00a5\7u\2\2\u00a5\u00a6\7g\2\2\u00a6&\3")
        buf.write("\2\2\2\u00a7\u00a8\7d\2\2\u00a8\u00a9\7t\2\2\u00a9\u00aa")
        buf.write("\7g\2\2\u00aa\u00ab\7c\2\2\u00ab\u00ac\7m\2\2\u00ac(\3")
        buf.write("\2\2\2\u00ad\u00ae\7/\2\2\u00ae*\3\2\2\2\u00af\u00b0\7")
        buf.write("#\2\2\u00b0,\3\2\2\2\u00b1\u00b2\7-\2\2\u00b2.\3\2\2\2")
        buf.write("\u00b3\u00b4\7,\2\2\u00b4\60\3\2\2\2\u00b5\u00b6\7\61")
        buf.write("\2\2\u00b6\62\3\2\2\2\u00b7\u00b8\7(\2\2\u00b8\64\3\2")
        buf.write("\2\2\u00b9\u00ba\7~\2\2\u00ba\66\3\2\2\2\u00bb\u00bc\7")
        buf.write(">\2\2\u00bc8\3\2\2\2\u00bd\u00be\7@\2\2\u00be:\3\2\2\2")
        buf.write("\u00bf\u00c0\7?\2\2\u00c0\u00c1\7?\2\2\u00c1<\3\2\2\2")
        buf.write("\u00c2\u00c3\7#\2\2\u00c3\u00c4\7?\2\2\u00c4>\3\2\2\2")
        buf.write("\u00c5\u00c6\7k\2\2\u00c6\u00c7\7p\2\2\u00c7\u00c8\7v")
        buf.write("\2\2\u00c8@\3\2\2\2\u00c9\u00ca\7d\2\2\u00ca\u00cb\7q")
        buf.write("\2\2\u00cb\u00cc\7q\2\2\u00cc\u00cd\7n\2\2\u00cd\u00ce")
        buf.write("\7g\2\2\u00ce\u00cf\7c\2\2\u00cf\u00d0\7p\2\2\u00d0B\3")
        buf.write("\2\2\2\u00d1\u00d2\7u\2\2\u00d2\u00d3\7v\2\2\u00d3\u00d4")
        buf.write("\7t\2\2\u00d4D\3\2\2\2\u00d5\u00d6\7e\2\2\u00d6\u00d7")
        buf.write("\7j\2\2\u00d7\u00d8\7c\2\2\u00d8\u00d9\7t\2\2\u00d9F\3")
        buf.write("\2\2\2\u00da\u00db\7k\2\2\u00db\u00dc\7p\2\2\u00dc\u00dd")
        buf.write("\7v\2\2\u00dd\u00de\7]\2\2\u00de\u00df\7_\2\2\u00dfH\3")
        buf.write("\2\2\2\u00e0\u00e1\7e\2\2\u00e1\u00e2\7j\2\2\u00e2\u00e3")
        buf.write("\7c\2\2\u00e3\u00e4\7t\2\2\u00e4\u00e5\7]\2\2\u00e5\u00e6")
        buf.write("\7_\2\2\u00e6J\3\2\2\2\u00e7\u00e8\7V\2\2\u00e8\u00e9")
        buf.write("\7t\2\2\u00e9\u00ea\7w\2\2\u00ea\u00eb\7g\2\2\u00ebL\3")
        buf.write("\2\2\2\u00ec\u00ed\7H\2\2\u00ed\u00ee\7c\2\2\u00ee\u00ef")
        buf.write("\7n\2\2\u00ef\u00f0\7u\2\2\u00f0\u00f1\7g\2\2\u00f1N\3")
        buf.write("\2\2\2\u00f2\u00f3\7)\2\2\u00f3\u00f4\t\2\2\2\u00f4\u00f5")
        buf.write("\7)\2\2\u00f5P\3\2\2\2\u00f6\u00f8\7/\2\2\u00f7\u00f6")
        buf.write("\3\2\2\2\u00f7\u00f8\3\2\2\2\u00f8\u00fa\3\2\2\2\u00f9")
        buf.write("\u00fb\5]/\2\u00fa\u00f9\3\2\2\2\u00fb\u00fc\3\2\2\2\u00fc")
        buf.write("\u00fa\3\2\2\2\u00fc\u00fd\3\2\2\2\u00fdR\3\2\2\2\u00fe")
        buf.write("\u0102\7$\2\2\u00ff\u0101\13\2\2\2\u0100\u00ff\3\2\2\2")
        buf.write("\u0101\u0104\3\2\2\2\u0102\u0103\3\2\2\2\u0102\u0100\3")
        buf.write("\2\2\2\u0103\u0105\3\2\2\2\u0104\u0102\3\2\2\2\u0105\u010f")
        buf.write("\7$\2\2\u0106\u010a\7)\2\2\u0107\u0109\13\2\2\2\u0108")
        buf.write("\u0107\3\2\2\2\u0109\u010c\3\2\2\2\u010a\u010b\3\2\2\2")
        buf.write("\u010a\u0108\3\2\2\2\u010b\u010d\3\2\2\2\u010c\u010a\3")
        buf.write("\2\2\2\u010d\u010f\7)\2\2\u010e\u00fe\3\2\2\2\u010e\u0106")
        buf.write("\3\2\2\2\u010fT\3\2\2\2\u0110\u0116\5_\60\2\u0111\u0115")
        buf.write("\5_\60\2\u0112\u0115\5]/\2\u0113\u0115\7a\2\2\u0114\u0111")
        buf.write("\3\2\2\2\u0114\u0112\3\2\2\2\u0114\u0113\3\2\2\2\u0115")
        buf.write("\u0118\3\2\2\2\u0116\u0114\3\2\2\2\u0116\u0117\3\2\2\2")
        buf.write("\u0117V\3\2\2\2\u0118\u0116\3\2\2\2\u0119\u011b\t\3\2")
        buf.write("\2\u011a\u0119\3\2\2\2\u011b\u011c\3\2\2\2\u011c\u011a")
        buf.write("\3\2\2\2\u011c\u011d\3\2\2\2\u011d\u011e\3\2\2\2\u011e")
        buf.write("\u011f\b,\2\2\u011fX\3\2\2\2\u0120\u0124\7%\2\2\u0121")
        buf.write("\u0123\n\4\2\2\u0122\u0121\3\2\2\2\u0123\u0126\3\2\2\2")
        buf.write("\u0124\u0122\3\2\2\2\u0124\u0125\3\2\2\2\u0125\u0127\3")
        buf.write("\2\2\2\u0126\u0124\3\2\2\2\u0127\u0128\b-\2\2\u0128Z\3")
        buf.write("\2\2\2\u0129\u012a\7\61\2\2\u012a\u012b\7,\2\2\u012b\u012f")
        buf.write("\3\2\2\2\u012c\u012e\13\2\2\2\u012d\u012c\3\2\2\2\u012e")
        buf.write("\u0131\3\2\2\2\u012f\u0130\3\2\2\2\u012f\u012d\3\2\2\2")
        buf.write("\u0130\u0132\3\2\2\2\u0131\u012f\3\2\2\2\u0132\u0133\7")
        buf.write(",\2\2\u0133\u0134\7\61\2\2\u0134\u0135\3\2\2\2\u0135\u0136")
        buf.write("\b.\2\2\u0136\\\3\2\2\2\u0137\u0138\t\5\2\2\u0138^\3\2")
        buf.write("\2\2\u0139\u013a\t\2\2\2\u013a`\3\2\2\2\r\2\u00f7\u00fc")
        buf.write("\u0102\u010a\u010e\u0114\u0116\u011c\u0124\u012f\3\b\2")
        buf.write("\2")
        return buf.getvalue()


class BaliLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    T__35 = 36
    T__36 = 37
    T__37 = 38
    CHAR = 39
    INTEGER = 40
    STRING = 41
    ID = 42
    WS = 43
    COMMENT = 44
    MULTILINE_COMMENT = 45

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'def'", "'('", "')'", "','", "'{'", "'}'", "'='", "';'", "'print'", 
            "'if'", "'else'", "'while'", "'return'", "'do'", "'foreach'", 
            "':'", "'switch'", "'case'", "'break'", "'-'", "'!'", "'+'", 
            "'*'", "'/'", "'&'", "'|'", "'<'", "'>'", "'=='", "'!='", "'int'", 
            "'boolean'", "'str'", "'char'", "'int[]'", "'char[]'", "'True'", 
            "'False'" ]

    symbolicNames = [ "<INVALID>",
            "CHAR", "INTEGER", "STRING", "ID", "WS", "COMMENT", "MULTILINE_COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "T__34", "T__35", "T__36", "T__37", 
                  "CHAR", "INTEGER", "STRING", "ID", "WS", "COMMENT", "MULTILINE_COMMENT", 
                  "DIGIT", "LETTER" ]

    grammarFileName = "Bali.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


